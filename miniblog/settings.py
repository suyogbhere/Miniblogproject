"""
Django settings for miniblog project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dij(3#bwhaig(_85%09okyc0lx^z5e2*q5si3s^ak$w1+vqlo-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'miniblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'miniblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Define the folder where logs will be stored
LOG_DIR = os.path.join(BASE_DIR, 'logs')

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

#Django_logger
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False if DEBUG else True,
    "formatters": {          #Format for displaying log information
        "verbose": {
            "format": "{levelname} {asctime} {module} {message} (Line: {lineno})",
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message} (Line: {lineno})",
            "style": "{",
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
            # Logging Level + Time Date + Module Name + Function Name + Line No + Logging Message 
        },
    },

     "filters": {       # filter logs
        "require_debug_true": {      # django does not output logs until debug mode
            "()": "django.utils.log.RequireDebugTrue",     
        },
    },

    "handlers": {      # Log Processing Method
        'console': {     # Output log to terminal  
            "level": "DEBUG" if DEBUG else "INFO",
            "filters": ["require_debug_true"],        # debug is true before output
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "formatter": "simple",
        },

        'info': {    # output log to file 
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename':  os.path.join(LOG_DIR, 'info.log'),   # Location of log file
            'formatter':'verbose',
            'maxBytes':  1024 * 1024 * 50,   #  log size 50M 
            'encoding': 'utf-8'
        },

        'demo':{    # Specially define a log to collect specific information
            "level": 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',    # Save the file to auto-cut
            'filename':  os.path.join(BASE_DIR, 'info.log'),   # Location of log file
            'maxBytes':  1024 * 1024 * 50,   #  log size 50M 
            'backupCount': 3,
            'formatter':'verbose',
            'encoding': 'utf-8'
        },

        'post':{    # Specially define a log to collect specific information
            "level": 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',    # Save the file to auto-cut
            'filename':  os.path.join(LOG_DIR, 'post.log'),   # Location of log file
            'maxBytes':  1024 * 1024 * 50,   #  log size 50M 
            'backupCount': 5,
            'formatter':'verbose',
            'encoding': 'utf-8'
        },
    },

     "loggers": {       # logger
        "django": {             # The default logger application is configured as follows
            "handlers": ["info" ,"console"],
            "propagate": True,
            "level":"INFO"
        },

        "demo_log": {             # The logger name "demo" is also handled seperately
            "handlers": ['demo'],
            "propagate": True,
            "level":"INFO"
        },

        "post_log": {             # The logger name "post" is also handled seperately
            "handlers": ['post'],
            "propagate": True,
            "level":"INFO"
        },
     },
 

 }

